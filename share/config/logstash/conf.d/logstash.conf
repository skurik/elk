input {
  beats {
    port => 5044
  }
}

filter {
  if [fields][index] == "log" and [fields][document_type] == "iis" {
    grok {      
      match => { "message" => "(?<event_time>\d\d\d\d\-\d\d\-\d\d \d\d:\d\d:\d\d) %{IP:host_ip} %{URIPROTO:method} %{URIPATH:request} (?:%{NOTSPACE:query_param}|-) %{NUMBER:port} (?:%{NOTSPACE:username}|-) %{IP:client_ip} (?:%{NOTSPACE:user_agent}|-) (?:%{NOTSPACE:referer}|-) %{NUMBER:status} %{NUMBER:sub_status} %{NUMBER:win32_status} %{NUMBER:bytes_sent} %{NUMBER:bytes_received} %{NUMBER:time_taken}" }
    }

    if [fields][service] == "iqube" {
      grok {
        match => { "request" => "/api/segments/%{NUMBER:segment_id}" }
      }

      grok {
        match => { "request" => [ "/api/projects/%{NUMBER:project_id}", "/api/v2/projects/%{NUMBER:project_id}" ] }
      }

      grok {
        match => { "request" => "/api/project-groups/%{NUMBER:project_group_id}" }
      }
    }

    date {
      match => [ "event_time", "yyyy-MM-dd HH:mm:ss" ]
      timezone => "UTC"
    }

    geoip {
      source => "client_ip"
    }
  }

  if [fields][index] == "log" and [fields][document_type] == "iqube" {

    grok {
      match => { "message" => [

      	"(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executed) %{WORD:action}\(\): %{NUMBER:status} %{WORD:status_text}, (l|L)ocation: %{NOTSPACE:header_location}",

        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executed) %{WORD:action}\(\): %{NUMBER:status} %{WORD:status_text}",
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executed) %{WORD:action}\(\)",

        # Get package
        #
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) (?<action>GetPackage).*segment = %{NUMBER:segment_id}.*accessRole = %{WORD:access_role}",

        # Segment translation tracing
        #
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+Translation \(%{NUMBER:segment_id}\): (?<log>.*)",

        # Segment translation/verification/review/crosscheck
        #
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) (?<action>Put(Translation|Verification|Review|CrossCheck)).*segment = %{NUMBER:segment_id}.*(translation|verification|crossCheck|review) = (?<body>\{.*\})",
        
        # File upload
        #
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) %{WORD:action}.*project = \{ Id: %{NUMBER:project_id}.*options = (?<body>\{.*\}).*fileName = %{NOTSPACE:filename}\)",

        # Put assignment options
        #
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) %{WORD:action}.*partId = %{WORD:assignment_prefixed_id}.*options = (?<body>\{.*\})",

        # Delete assignment, get assignment
        #
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) %{WORD:action}.*partId = %{WORD:assignment_prefixed_id}",

        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) %{WORD:action}.*project = \{ Id: %{NUMBER:project_id}.*options = (?<body>\{.*\})",
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) %{WORD:action}.*project = \{ Id: %{NUMBER:project_id}",
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<action_phase>Executing) %{WORD:action}",

        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+[\w\.]+\.%{WORD:controller}\s+\-\s+(?<log>.*)",
        "(?<event_time>\d+ [a-zA-Z]+ \d+ \d+:\d+:\d+,\d+) \[\d+\] %{WORD:log_level}\s+%{WORD:controller}\s+\-\s+(?<log>.*)"
      ]}
    }

    date {
      match => [ "event_time", "dd MMM yyyy HH:mm:ss,SSS" ]
    }
  }

  if [fields][index] == "log" and [fields][document_type] == "sphinx_query" {
    grok {
      match => { "message" => [
        "\[(?<day_of_week>\w+) (?<month>\w+) \s?(?<day_of_month>\d+) (?<time_and_year>\d\d:\d\d:\d\d\.\d+ \d+)\] (?<query_time_taken>\d+\.\d+) sec \d+\.\d+ sec \[%{NOTSPACE:match_mode}/%{NUMBER:filter_count}/%{NOTSPACE:sort_mode} %{NUMBER:total_matches} \(%{NUMBER:offset},%{NUMBER:limit}\)\] \[%{NOTSPACE:index_name}\] (?<query>.*)"
      ]}
    }

    mutate {
      add_field => [
        "merged_date", "%{day_of_week} %{month} %{day_of_month} %{time_and_year}"
      ]
    }

    date {
      match => [ "merged_date", "EEE MMM d HH:mm:ss.SSS yyyy" ]
    }
  }
}

output {
  elasticsearch {
    hosts => "___ELASTICSEARCH_HOST___:9200"
    manage_template => false
    index => "%{[fields][index]}-%{+YYYY.MM.dd}"
    document_type => "%{[fields][document_type]}"
  }
}
